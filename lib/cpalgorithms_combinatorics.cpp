#include <bits/stdc++.h>
using namespace std;
typedef uint64_t ull;
typedef int64_t  ll;
const ll infll = 9223372036854775807LL;
#define PB push_back  
#define MP make_pair  
#define SZ(v) ((ll)(v).size())  
#define FOR(i,a,b) for(ll i=(a);i<(b);++i)  
#define REP(i,n) FOR(i,0,n)  
#define FORE(i,a,b) for(ll i=(a);i<=(b);++i)  
#define REPE(i,n) FORE(i,0,n)  
#define FORSZ(i,a,v) FOR(i,a,SZ(v))  
#define REPSZ(i,v) REP(i,SZ(v))

//////////////////////////////////////////////////
//
// SECTION A: FUNDAMENTALS
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A1: Finding Power of Factorial Divisor
// https://cp-algorithms.com/algebra/factorial-divisors.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A2: Binomial Coefficients
// https://cp-algorithms.com/combinatorics/binomial-coefficients.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A3: Catalan Numbers
// https://cp-algorithms.com/combinatorics/catalan-numbers.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION B: TECHNIQUES
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B1: The Inclusion-Exclusion Principle
// https://cp-algorithms.com/combinatorics/inclusion-exclusion.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B2: Burnside's lemma / P'olya enumeration theorem
// https://cp-algorithms.com/combinatorics/burnside.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B3: Stars and bars
// https://cp-algorithms.com/combinatorics/stars_and_bars.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B4: Generating all K-combinations
// https://cp-algorithms.com/combinatorics/generating_combinations.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION C: TASKS
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C1: Placing Bishops on a Chessboard
// https://cp-algorithms.com/combinatorics/bishops-on-chessboard.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C2: Balanced bracket sequences
// https://cp-algorithms.com/combinatorics/bracket_sequences.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C3: Counting labeled graphs
// https://cp-algorithms.com/combinatorics/counting_labeled_graphs.html
////////////////////////////////////////////////////////////

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    cout << fixed << setprecision(15);
    //freopen("999A.in1","r",stdin);
    return 0;
}
