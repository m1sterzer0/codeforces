#include <bits/stdc++.h>
using namespace std;
typedef uint64_t ull;
typedef int64_t  ll;
const ll infll = 9223372036854775807LL;
#define PB push_back  
#define MP make_pair  
#define SZ(v) ((ll)(v).size())  
#define FOR(i,a,b) for(ll i=(a);i<(b);++i)  
#define REP(i,n) FOR(i,0,n)  
#define FORE(i,a,b) for(ll i=(a);i<=(b);++i)  
#define REPE(i,n) FORE(i,0,n)  
#define FORSZ(i,a,v) FOR(i,a,SZ(v))  
#define REPSZ(i,v) REP(i,SZ(v))

//////////////////////////////////////////////////
//
// SECTION A: SEQUENCES
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A1: RMQ task (Range Minum Query - the smallest element in an interval)
// https://cp-algorithms.com/sequences/rmq.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A2: Longest increasing subsequence
// https://cp-algorithms.com/sequences/longest_increasing_subsequence.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A3: Search the subsegment with the maximum/minimum sum
// https://cp-algorithms.com/others/maximum_average_segment.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A4: K-th order statistic in O(N)
// https://cp-algorithms.com/sequences/k-th.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION B: Game Theory
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B1: Games on arbitrary graphs
// https://cp-algorithms.com/game_theory/games_on_graphs.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B2: Sprague-Grundy theorem. Nim
// https://cp-algorithms.com/game_theory/sprague-grundy-nim.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION C: Schedules
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C1: Scheduling jobs on one machine
// https://cp-algorithms.com/schedules/schedule_one_machine.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C2: Scheduling jobs on two machines
// https://cp-algorithms.com/schedules/schedule_two_machines.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C3: Optimal schedule of jobs given their deadlines and durations
// https://cp-algorithms.com/schedules/schedule-with-completion-duration.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION D: Miscellaneous
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION D1: Josephus problem
// https://cp-algorithms.com/others/josephus_problem.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION D2: 15 Puzzle Game: Existence Of The Solution
// https://cp-algorithms.com/others/15-puzzle.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION D3: The Stern-Brocot Tree and Farey Sequences
// https://cp-algorithms.com/others/stern_brocot_tree_farey_sequences.html
////////////////////////////////////////////////////////////












int main() {
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    cout << fixed << setprecision(15);
    //freopen("999A.in1","r",stdin);
    return 0;
}
