#include <bits/stdc++.h>
using namespace std;
typedef uint64_t ull;
typedef int64_t  ll;
const ll infll = 9223372036854775807LL;
#define PB push_back  
#define MP make_pair  
#define SZ(v) ((ll)(v).size())  
#define FOR(i,a,b) for(ll i=(a);i<(b);++i)  
#define REP(i,n) FOR(i,0,n)  
#define FORE(i,a,b) for(ll i=(a);i<=(b);++i)  
#define REPE(i,n) FORE(i,0,n)  
#define FORSZ(i,a,v) FOR(i,a,SZ(v))  
#define REPSZ(i,v) REP(i,SZ(v))

//////////////////////////////////////////////////
//
// SECTION A: FUNDAMENTALS
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A1: String Hashing
// https://cp-algorithms.com/string/string-hashing.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A2: Rabin-Karp for String Matching
// https://cp-algorithms.com/string/rabin-karp.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A3: Prefix function
// https://cp-algorithms.com/string/prefix-function.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A4: Z-function
// https://cp-algorithms.com/string/z-function.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A5: Suffix Array
// https://cp-algorithms.com/string/suffix-array.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A6: Aho-Corasick algorithm
// https://cp-algorithms.com/string/aho_corasick.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION B: ADVANCED
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B1: Suffix Tree
// https://cp-algorithms.com/string/suffix-tree-ukkonen.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B2: Suffix Automaton
// https://cp-algorithms.com/string/suffix-automaton.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B3: Lyndon Factorization
// https://cp-algorithms.com/string/lyndon_factorization.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION C: TASKS
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C1: Expression Parsing
// https://cp-algorithms.com/string/expression_parsing.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C2: Finding all sub-palindromes in O(N)
// https://cp-algorithms.com/string/manacher.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C3: Finding repetitions
// https://cp-algorithms.com/string/main_lorentz.html
////////////////////////////////////////////////////////////

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    cout << fixed << setprecision(15);
    //freopen("999A.in1","r",stdin);
    return 0;
}
