#include <bits/stdc++.h>
using namespace std;
typedef uint64_t ull;
typedef int64_t  ll;
const ll infll = 9223372036854775807LL;
#define PB push_back  
#define MP make_pair  
#define SZ(v) ((ll)(v).size())  
#define FOR(i,a,b) for(ll i=(a);i<(b);++i)  
#define REP(i,n) FOR(i,0,n)  
#define FORE(i,a,b) for(ll i=(a);i<=(b);++i)  
#define REPE(i,n) FORE(i,0,n)  
#define FORSZ(i,a,v) FOR(i,a,SZ(v))  
#define REPSZ(i,v) REP(i,SZ(v))

//////////////////////////////////////////////////
//
// SECTION A: ELEMENTARY OPERATIONS
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A1: Basic Geometry
// https://cp-algorithms.com/geometry/basic-geometry.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A2: Finding the equation of a line for a segment
// https://cp-algorithms.com/geometry/segment-to-line.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A3: Intersection Point of Lines
// https://cp-algorithms.com/geometry/lines-intersection.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A4: Check if two segments intersect
// https://cp-algorithms.com/geometry/check-segments-intersection.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A5: Intersection of Segments
// https://cp-algorithms.com/geometry/segments-intersection.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A6: Circle-Line Intersection
// https://cp-algorithms.com/geometry/circle-line-intersection.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A7: Circle-Circle Intersection
// https://cp-algorithms.com/geometry/circle-circle-intersection.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A8: Common tangents to two circles
// https://cp-algorithms.com/geometry/tangents-to-two-circles.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION A9: Length of the union of segments
// https://cp-algorithms.com/geometry/length-of-segments-union.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION B: POLYGONS
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B1: Oriented area of a triangle
// https://cp-algorithms.com/geometry/oriented-triangle-area.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B2: Area of simple polygon
// https://cp-algorithms.com/geometry/area-of-simple-polygon.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B3: Check if points belong to the convex polygon in O(log N)
// https://cp-algorithms.com/geometry/point-in-convex-polygon.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B4: Pick's Theorem -- area of lattice polygons
// https://cp-algorithms.com/geometry/picks-theorem.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION B5: Lattice points of non-lattice polygons
// https://cp-algorithms.com/geometry/lattice-points.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION C: CONVEX HULL
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C1: Convex hull construction using Graham's Scan
// https://cp-algorithms.com/geometry/grahams-scan-convex-hull.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION C2: Convex hull trick and Li Chao tree
// https://cp-algorithms.com/geometry/convex_hull_trick.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION D: SWEEP-LINE
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION D1: Search for a pair of intersecting segments
// https://cp-algorithms.com/geometry/intersecting_segments.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION D2: Point location in O(log N)
// https://cp-algorithms.com/geometry/point-location.html
////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//
// SECTION E: MISCELLANEOUS
//
//////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION E1: Finding the nearest pair of points
// https://cp-algorithms.com/geometry/nearest_points.html
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// SUBSECTION E2: Delaunay triangulation and Voronoi diagram
// https://cp-algorithms.com/geometry/delaunay.html
////////////////////////////////////////////////////////////
















int main() {
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    cout << fixed << setprecision(15);
    //freopen("999A.in1","r",stdin);
    return 0;
}
